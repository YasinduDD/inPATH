<!-- <html>
    <head>
      <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f2f2f2;
            margin: 0;
            padding: 20px;
        }

        .container {
            max-width: 400px;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        h1 {
            text-align: center;
            margin-top: 0;
        }

        form {
            display: flex;
            flex-direction: column;
        }

        label {
            margin-bottom: 5px;
        }

        input[type="number"] {
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 3px;
            border: 1px solid #ccc;
        }

        input[type="submit"] {
            background-color: #4CAF50;
            color: #fff;
            padding: 10px;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }

        .success-message {
            background-color: #dff0d8;
            color: #3c763d;
            padding: 10px;
            border-radius: 3px;
            margin-bottom: 10px;
        }
    </style>
    </head>
    <body>



        <form action="/allocatedesks" method="POST">
            <input type="number" name="upperlimit" placeholder="Upper Limit">
            <input type="number" name="lowerlimit" placeholder="Lower Limit">
            <input type="submit">
        </form>
    </body>
</html> -->

<!DOCTYPE html>
<html>
<head>
  <style>
    .navbar {
      background-color: #162447;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 20px;
    }
  
    .logo {
      width: 100px;
      height: auto;
    }
  
    .nav-items {
      list-style-type: none;
      margin: 0;
      padding: 0;
    }
  
    .nav-items li {
      display: inline-block;
      margin-left: 10px;
    }
  
    .nav-items li a {
      display: block;
      padding: 10px;
      text-decoration: none;
      color: #fff;
      font-family: "Arial", sans-serif;
    }
  
    .nav-items li a:hover {
      background-color: #1e3b6b;
    }
  
    .nav-items li a.active {
      color: #162447;
      background-color: #fff;
    }
  
    body {
      font-family: Arial, sans-serif;
    }
  
    h1 {
      color: #333;
      font-size: 24px;
      text-align: center;
      margin-top: 20px;
    }
  
    form {
      max-width: 400px;
      margin: 0 auto;
    }
  
    label {
      display: block;
      margin-bottom: 10px;
      font-weight: bold;
      color: #333;
    }
  
    input[type="number"] {
      width: 100%;
      padding: 12px 10px; /* Adjusted height */
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box;
      margin-bottom: 20px;
      /* margin-left: 40px; Added left margin */
    }
  
    input[type="submit"] {
      background-color: #0056b3;
      color: white;
      padding: 12px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
    }
  
    input[type="submit"]:hover {
      background-color: #162447;
    }


.title {
  color: white;
}

.main {
  margin-top: 20px;
  background-color: #242333;
  display: flex;
  flex-direction: column;
  color: white;
  align-items: center;
  justify-content: center;
  height: 100vh;
}

.hall-container {
  margin: 20px 0;
}

.hall-container select {
  background-color: #fff;
  border: 0;
  border-radius: 5px;
  font-size: 14px;
  margin-left: 10px;
  padding: 5px 15px 5px 15px;
  -moz-appearance: none;
  -webkit-appearance: none;
  appearance: none;
}

.container {
  perspective: 1000px;
  margin-bottom: 30px;
}

.seat {
  background-color: #444451;
  height: 30px;
  width: 30px;
  margin: 6px;
  border-top-left-radius: 20px;
  border-top-right-radius: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  font-size: 12px;
}

.seat.selected {
  background-color: #162447;
}

.seat.occupied {
  background-color: #fff;
}

.seat:not(.occupied):hover {
  cursor: pointer;
  transform: scale(1.2);
}

.showcase .seat:not(.occupied):hover {
  cursor: default;
  transform: scale(1);
}

.showcase {
  background-color: rgba(0, 0, 0, 0.1);
  padding: 5px 10px;
  border-radius: 5px;
  color: #777;
  list-style-type: none;
  display: flex;
  justify-content: space-between;
}

.showcase li {
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 10px;
}

.showcase li small {
  margin-left: 10px;
}

.row {
  display: flex;
  justify-content: center;
}

.row > div:nth-child(2),
.row > div:nth-child(10) {
  margin-right: 24px; /* Adjust the gap size as needed */
}

.screen {
  background-color: #fff;
  height: 70px;
  width: 100%;
  margin: 15px 0;
  transform: rotateX(-45deg);
  box-shadow: 0 3px 10px rgba(255, 255, 255, 0.75);
}

p.text {
  margin: 5px 0;
}

p.text span {
  color: #6feaf6;
}

  </style>
</head>
<body>
  <div class="navbar">
    <img src="logo.png" class="logo">
    <ul class="nav-items">
      <li><a href="/index">Your Profile</a></li>
      <li><a href="/enroll">Enroll a Student</a></li>
      <li><a href="/uploadresults">Upload Results</a></li>
      <li><a href="/allocatedesks">Allocate Desks</a></li>
      <li><a href="/announcements">Announcements</a></li>
    </ul>
  </div>

  <h1>Allocate Desks</h1>
  <form action="/allocatedesks" method="POST">
    <label for="upperlimit">Upper Limit:</label>
    <input type="number" id="upperlimit" name="upperlimit" placeholder="Upper Limit" required><br><br>
    <label for="lowerlimit">Lower Limit:</label>
    <input type="number" id="lowerlimit" name="lowerlimit" placeholder="Lower Limit" required><br><br>
    <input type="submit" value="Submit">
  </form>

  <div class="main">
  <div class="hall-container">
    <label class="title">Select a Hall </label>
    <select id="hall">
    <option value="ec101">EC 101</option>
    <option value="ee202">EE 202</option>
    </select>
  </div>

<ul class="showcase">
  <li>
    <div class="seat"></div>
    <small>N/A</small>
  </li>

  <li>
    <div class="seat selected"></div>
    <small>Selected</small>
  </li>

  <!-- <li>
    <div class="seat occupied"></div>
    <small>Occupied</small>
  </li> -->
</ul>

<div id="hall-container" class="container">
  <!-- Dynamic Hall Structure -->
</div>
</div>

<!-- <script src="script.js"></script> -->
<script>const hallContainer = document.getElementById('hall-container');
  const hallSelect = document.getElementById('hall');
  let ticketPrice = +hallSelect.value;
  
  // Function to generate the dynamic hall structure based on the selected option
  
  function generateHallStructure(hall) {
    let rows = 0;
    let seatsPerRow = 0;
    let totalSeats = 0;
    let startSeat = 0;
  
    if (hall === 'ec101') {
      rows = 6;
      seatsPerRow = 12;
      totalSeats = 72;
      startSeat = 1;
    } else if (hall === 'ee202') {
      rows = 4;
      seatsPerRow = 8;
      totalSeats = 32;
      startSeat = 73;
    }
  
    // Clear the existing hall structure
    hallContainer.innerHTML = '';
  
    // Generate the dynamic hall structure
    for (let i = 1; i <= rows; i++) {
      const row = document.createElement('div');
      row.className = 'row';
  
      for (let j = 1; j <= seatsPerRow; j++) {
        const seat = document.createElement('div');
        seat.className = 'seat';
        seat.innerText = startSeat + (i - 1) * seatsPerRow + j - 1; // Assign seat number
        row.appendChild(seat);
      }
  
      hallContainer.appendChild(row);
    }
  }
  
  // Function to update the selected seats based on the container
  function updateSelectedSeats() {
    const selectedSeats = hallContainer.querySelectorAll('.row .seat.selected');
    const seatsIndex = [...selectedSeats].map((seat) => [...hallContainer.querySelectorAll('.row .seat')].indexOf(seat));
  
    // Update localStorage and UI based on the selected seats
    localStorage.setItem('selectedSeats', JSON.stringify(seatsIndex));
    updateSelectedCount();
  }
  
  // ...
  
  // Movie select event
  hallSelect.addEventListener('change', (e) => {
    ticketPrice = +e.target.value;
    generateHallStructure(e.target.value);
    setMovieData(e.target.selectedIndex, e.target.value);
    updateSelectedSeats();
  });
  
  // Seat click event
  hallContainer.addEventListener('click', (e) => {
    if (e.target.classList.contains('seat') && !e.target.classList.contains('occupied')) {
      e.target.classList.toggle('selected');
      updateSelectedSeats();
    }
  });
  
  // Generate initial hall structure
  generateHallStructure(hallSelect.value);
  
  </script>

</body>
</html>
