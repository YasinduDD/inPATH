<!-- <!DOCTYPE html>
<html>
  <head>
    <title>Exams</title>
  </head>
  <body>
    <h1>Exams</h1>
    <form action="/exams" method="GET">
      <label for="moduleName">Module Name:</label>
      <input type="text" id="moduleName" name="moduleName" required>
      <input type="submit" value="Show Results">
    </form>
    

  </body>
</html> -->


<!-- exams.ejs -->
<!-- <!DOCTYPE html>
<html>
<head>
  <title>Exams</title>
</head>
<body>
  <h1>Welcome to the Exams Page</h1>

</body>
</html> -->


<!DOCTYPE html>
<html>
<head>
  <title>Exams</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
      background-color: #F9FCFF;
    }

    h1 {
      color: #333;
      font-size: 24px;
      margin-bottom: 20px;
    }

    p {
      
      color: #666;
      margin-top: 30px;
      margin-bottom: 30px;
    }

    .desk-number {
      background-color: #333;
      color: #fff;
      padding: 5px 10px;
      display: inline-block;
      border-radius: 3px;
    }

    form {
      margin-bottom: 20px;
    }

    label {
      display: block;
      margin-bottom: 5px;
      color: #333;
      font-weight: bold;
    }

    input[type="text"] {
      padding: 5px;
      width: 200px;
      border: 1px solid #ccc;
      border-radius: 3px;
    }

    button[type="submit"] {
      padding: 8px 12px;
      background-color: #0056b3;
      color: #fff;
      border: none;
      border-radius: 3px;
      cursor: pointer;
    }

    button[type="submit"]:hover {
      background-color: #555;
    }

    .error-message {
      color: red;
      margin-top: 10px;
    }

    iframe {
      width: 100%;
      height: 800px;
      border: none;
    }
    .navbar {
    background-color: #162447;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 20px;
  }
  
  .logo {
    width: 100px;
    height: auto;
  }
  
  .nav-items {
    list-style-type: none;
    margin: 0;
    padding: 0;
  }
  
  .nav-items li {
    display: inline-block;
    margin-left: 10px;
  }
  
  .nav-items li a {
    display: block;
    padding: 10px;
    text-decoration: none;
    color: #fff;
    font-family: "Arial", sans-serif;
  }
  
  .nav-items li a:hover {
    background-color: #1e3b6b;
  }
  
  .nav-items li a.active {
    color: #162447;
    background-color: #fff;
  }


  /* added */

  .title {
  color: white;
}

.title2 {
  color: white;
}

.desk-all {
  background-color: #242333;
  display: flex;
  flex-direction: column;
  color: white;
  align-items: center;
  justify-content: center;
  height: 100vh;
  margin-bottom: 20px;
}

.hall-container {
  display: flex;
  align-items: center;
  margin: 20px 0;
}

.hall-container label {
  margin-right: 10px;
}

.hall-container select {
  background-color: #fff;
  border: 0;
  border-radius: 5px;
  font-size: 14px;
  padding: 5px 15px;
  -moz-appearance: none;
  -webkit-appearance: none;
  appearance: none;
}

/* Add the following CSS rule */
.hall-container #select-seat-btn {
  margin-left: 10px;
}

.container {
  perspective: 1000px;
  margin-bottom: 30px;
}

.seat {
  background-color: #444451;
  height: 30px;
  width: 30px;
  margin: 6px;
  border-top-left-radius: 20px;
  border-top-right-radius: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  font-size: 12px;
}

.seat.selected {
  background-color: #0056b3;
}

/* .seat.occupied {
  background-color: #fff;
} */

.seat:not(.occupied):hover {
  cursor: pointer;
  transform: scale(1.2);
}

.showcase .seat:not(.occupied):hover {
  cursor: default;
  transform: scale(1);
}

.showcase {
  background-color: rgba(0, 0, 0, 0.1);
  padding: 5px 10px;
  border-radius: 5px;
  color: #777;
  list-style-type: none;
  display: flex;
  justify-content: space-between;
}

.showcase li {
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 10px;
}

.showcase li small {
  margin-left: 10px;
}

.row {
  display: flex;
  justify-content: center;
}

.row > div:nth-child(2),
.row > div:nth-child(10) {
  margin-right: 24px; /* Adjust the gap size as needed */
}

.screen {
  background-color: #fff;
  height: 70px;
  width: 100%;
  margin: 15px 0;
  transform: rotateX(-45deg);
  box-shadow: 0 3px 10px rgba(255, 255, 255, 0.75);
}

p.text {
  margin: 5px 0;
}

p.text span {
  color: #6feaf6;
}

  </style>
</head>
<body>
  <div class="navbar">
    <img src="/logo.png" class="logo">
    <ul class="nav-items">
      <li><a href="/profile/<%= user._id %>">Profile</a></li>
      <li><a href="/attend/<%= user._id %>">Attendance</a></li>
      <li><a href="/exams/<%= user._id %>">Exams</a></li>
      <li><a href="/showann/<%= user._id %>">Announcements</a></li>
      <li><a href="/pre/<%= user._id %>">Predictions</a></li>
      <li><a href="#">CV Maker</a></li>
    </ul>
  </div>
  <!-- <h1>Welcome to the Exams Page</h1> -->
  <p>Your Desk Number: <%= desk_no %></p>
  <div class="desk-all">
    <div class="hall-container">
      <label class="title" for="hall">Pick a Hall: </label>
      <select id="hall">
        <option value="ec101">EC 101</option>
        <option value="ee202">EE 202</option>
      </select>
    </div>
    
    <ul class="showcase">
      <li>
        <div class="seat"></div>
        <small>N/A</small>
      </li>
    
      <li>
        <div class="seat selected"></div>
        <small>Selected</small>
      </li>
    
      <!-- <li>
        <div class="seat occupied"></div>
        <small>Occupied</small>
      </li> -->
    </ul>
    <div class="hall-container">
      <label for="seat-number" class="title2">Enter Seat Number: </label>
      <input type="number" id="seat-number" />
      <button id="select-seat-btn">Find</button>
    </div>
    <div id="hall-container" class="container">
      <!-- Dynamic Hall Structure -->
    </div>
  </div>
  <form action="/exams/<%= user._id %>/result" method="POST" target="pdfFrame">
    <label for="moduleName">Module Name:</label>
    <input type="text" id="moduleName" name="moduleName" required>
    <button type="submit">Get Result Sheet</button>
    <% if (moduleNotFound) { %>
      <p>Module not found</p>
    <% } %>
  </form>
  <iframe name="pdfFrame" width="100%" height="800px" frameborder="0"></iframe>


  <!-- added -->


  

<!-- <script src="script.js"></script> -->
<script>
        // Get the hall container and hall select elements
        const hallContainer = document.getElementById('hall-container');
        const hallSelect = document.getElementById('hall');
        
        let ticketPrice = +hallSelect.value;
        
        // Function to generate the dynamic hall structure based on the selected option
        function generateHallStructure(hall) {
          let rows = 0;
          let seatsPerRow = 0;
          let totalSeats = 0;
          let startSeat = 0;
        
          if (hall === 'ec101') {
            rows = 6;
            seatsPerRow = 12;
            totalSeats = 72;
            startSeat = 1;
          } else if (hall === 'ee202') {
            rows = 4;
            seatsPerRow = 8;
            totalSeats = 32;
            startSeat = 73;
          }
        
          // Clear the existing hall structure
          hallContainer.innerHTML = '';
        
          // Generate the dynamic hall structure
          for (let i = 1; i <= rows; i++) {
            const row = document.createElement('div');
            row.className = 'row';
        
            for (let j = 1; j <= seatsPerRow; j++) {
              const seat = document.createElement('div');
              seat.className = 'seat';
              seat.innerText = startSeat + (i - 1) * seatsPerRow + j - 1; // Assign seat number
              row.appendChild(seat);
            }
        
            hallContainer.appendChild(row);
          }
        }
        
        // Function to update the selected seats based on the container
        function updateSelectedSeats() {
          const selectedSeats = hallContainer.querySelectorAll('.row .seat.selected');
          const seatsIndex = [...selectedSeats].map((seat) =>
            [...hallContainer.querySelectorAll('.row .seat')].indexOf(seat)
          );
        
          // Update localStorage and UI based on the selected seats
          localStorage.setItem('selectedSeats', JSON.stringify(seatsIndex));
          updateSelectedCount();
        }
        
        // Function to handle seat selection based on the entered seat number
        function selectSeatByNumber(seatNumber) {
          const allSeats = hallContainer.querySelectorAll('.row .seat');
          const seatToSelect = [...allSeats].find(
            (seat) => seat.innerText === seatNumber.toString()
          );
        
          if (seatToSelect && !seatToSelect.classList.contains('occupied')) {
            seatToSelect.classList.add('selected');
            updateSelectedSeats();
          }
        }
        
        // Movie select event
        hallSelect.addEventListener('change', (e) => {
          ticketPrice = +e.target.value;
          generateHallStructure(e.target.value);
          setMovieData(e.target.selectedIndex, e.target.value);
          updateSelectedSeats();
        });
        
        // Seat click event
        hallContainer.addEventListener('click', (e) => {
          if (e.target.classList.contains('seat') && !e.target.classList.contains('occupied')) {
            e.target.classList.toggle('selected');
            updateSelectedSeats();
          }
        });
        
        // Get the input field and select seat button elements
        const seatNumberInput = document.getElementById('seat-number');
        const selectSeatBtn = document.getElementById('select-seat-btn');
        
        // Select seat button click event
        selectSeatBtn.addEventListener('click', () => {
          const seatNumber = parseInt(seatNumberInput.value);
          if (!isNaN(seatNumber)) {
            selectSeatByNumber(seatNumber);
          }
        });
        
        // Generate initial hall structure
        generateHallStructure(hallSelect.value);
  
  </script>

</body>
</html>

